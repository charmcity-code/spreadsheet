import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, o as onMount, v as validate_slots, p as empty, l as insert_dev, n as noop, b as detach_dev, e as element, t as text, f as claim_element, g as children, h as claim_text, j as attr_dev, k as add_location, m as append_dev, r as listen_dev, u as set_data_dev, w as run_all, x as prop_dev, y as validate_each_argument, z as create_component, A as claim_component, B as mount_component, C as transition_in, D as transition_out, E as destroy_component, F as group_outros, G as check_outros, H as destroy_each } from './client.ccecee92.js';

/* src/components/Cell.svelte generated by Svelte v3.24.1 */
const file = "src/components/Cell.svelte";

// (139:2) {:else}
function create_else_block(ctx) {
	let span;
	let t;
	let span_class_value;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			span = element("span");
			t = text(/*value*/ ctx[0]);
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			t = claim_text(span_nodes, /*value*/ ctx[0]);
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "class", span_class_value = "cell " + (/*selected*/ ctx[3] ? "selected" : "") + " svelte-lcogt");
			add_location(span, file, 140, 4, 3433);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t);

			if (!mounted) {
				dispose = [
					listen_dev(span, "click", /*clicked*/ ctx[9], false, false, false),
					listen_dev(span, "dblclick", /*doubleClicked*/ ctx[10], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*value*/ 1) set_data_dev(t, /*value*/ ctx[0]);

			if (dirty & /*selected*/ 8 && span_class_value !== (span_class_value = "cell " + (/*selected*/ ctx[3] ? "selected" : "") + " svelte-lcogt")) {
				attr_dev(span, "class", span_class_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(139:2) {:else}",
		ctx
	});

	return block;
}

// (129:20) 
function create_if_block_2(ctx) {
	let input;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			input = element("input");
			this.h();
		},
		l: function claim(nodes) {
			input = claim_element(nodes, "INPUT", {
				class: true,
				type: true,
				value: true,
				autoFocus: true
			});

			this.h();
		},
		h: function hydrate() {
			attr_dev(input, "class", "cell");
			attr_dev(input, "type", "text");
			input.value = /*value*/ ctx[0];
			input.autofocus = true;
			add_location(input, file, 130, 4, 3228);
		},
		m: function mount(target, anchor) {
			insert_dev(target, input, anchor);
			input.focus();

			if (!mounted) {
				dispose = [
					listen_dev(input, "change", /*onChange*/ ctx[6], false, false, false),
					listen_dev(input, "blur", /*onBlur*/ ctx[7], false, false, false),
					listen_dev(input, "keypress", /*onKeyPressOnInput*/ ctx[8], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*value*/ 1 && input.value !== /*value*/ ctx[0]) {
				prop_dev(input, "value", /*value*/ ctx[0]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(input);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(129:20) ",
		ctx
	});

	return block;
}

// (126:2) {#if row === 0}
function create_if_block_1(ctx) {
	let span;
	let t_value = /*alpha*/ ctx[5][/*col*/ ctx[2]] + "";
	let t;

	const block = {
		c: function create() {
			span = element("span");
			t = text(t_value);
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			t = claim_text(span_nodes, t_value);
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "class", "cell first-row svelte-lcogt");
			add_location(span, file, 127, 4, 3112);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*col*/ 4 && t_value !== (t_value = /*alpha*/ ctx[5][/*col*/ ctx[2]] + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(126:2) {#if row === 0}",
		ctx
	});

	return block;
}

// (122:0) {#if col === 0}
function create_if_block(ctx) {
	let span;
	let t;

	const block = {
		c: function create() {
			span = element("span");
			t = text(/*row*/ ctx[1]);
			this.h();
		},
		l: function claim(nodes) {
			span = claim_element(nodes, "SPAN", { class: true });
			var span_nodes = children(span);
			t = claim_text(span_nodes, /*row*/ ctx[1]);
			span_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(span, "class", "cell first-col svelte-lcogt");
			add_location(span, file, 123, 2, 3021);
		},
		m: function mount(target, anchor) {
			insert_dev(target, span, anchor);
			append_dev(span, t);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*row*/ 2) set_data_dev(t, /*row*/ ctx[1]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(span);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(122:0) {#if col === 0}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let if_block_anchor;

	function select_block_type(ctx, dirty) {
		if (/*col*/ ctx[2] === 0) return create_if_block;
		if (/*row*/ ctx[1] === 0) return create_if_block_1;
		if (/*editing*/ ctx[4]) return create_if_block_2;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			if_block.l(nodes);
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, [dirty]) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

const delay = 200;

function instance($$self, $$props, $$invalidate) {
	let { row } = $$props;
	let { col } = $$props;
	let { value } = $$props;
	let { onChangedValue } = $$props;
	const alpha = (" abcdefghijklmnopqrstuvwxyz").split("");
	let timer = 0;
	let selected = false;
	let prevent = false;
	let editing = false;

	// Emits the `unselectAll` event, used to tell all the other cells to unselect
	const emitUnselectAllEvent = () => {
		const unselectAllEvent = new Event("unselectAll");

		if (typeof window !== "undefined") {
			window.document.dispatchEvent(unselectAllEvent);
		}
	};

	//  Used by `componentDid(Un)Mount`, handles the `unselectAll` event response
	const handleUnselectAll = () => {
		if (selected) {
			$$invalidate(3, selected = false);
		}
	};

	// Lifecycle events
	onMount(() => {
		if (typeof window !== "undefined") {
			window.document.addEventListener("unselectAll", handleUnselectAll);
		}
	});

	// When a Cell value changes, re-determine the display value by calling the formula calculation
	const onChange = event => {
		$$invalidate(0, value = event.target.value);
	};

	/**
 * Called by the `onBlur` or `onKeyPressOnInput` event handlers,
 * it escalates the value changed event, and restore the editing
 * state to `false`.
 */
	const hasNewValue = value => {
		onChangedValue(col, row, value);
		$$invalidate(4, editing = false);
	};

	// Handle moving away from a cell, stores the new value
	const onBlur = event => {
		hasNewValue(event.target.value);
	};

	// Handle pressing a key when the Cell is an input element
	const onKeyPressOnInput = event => {
		if (event.key === "Enter") {
			hasNewValue(event.target.value);
		}
	};

	// Handle clicking a cell
	const clicked = () => {
		// Prevent click and double click to conflict
		timer = setTimeout(
			() => {
				if (!prevent) {
					// Unselect all the other cells and set the current ell state to `selected`
					emitUnselectAllEvent();

					$$invalidate(3, selected = true);
				}

				prevent = false;
			},
			delay
		);
	};

	// Handle doubleclicking a cell
	const doubleClicked = () => {
		// Prevent click and double click to conflict
		clearTimeout(timer);

		prevent = true;

		// Unselect all the other cells and set the current cell state to `selected` & `editing`
		emitUnselectAllEvent();

		$$invalidate(4, editing = true);
		$$invalidate(3, selected = true);
	};

	const writable_props = ["row", "col", "value", "onChangedValue"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Cell> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Cell", $$slots, []);

	$$self.$$set = $$props => {
		if ("row" in $$props) $$invalidate(1, row = $$props.row);
		if ("col" in $$props) $$invalidate(2, col = $$props.col);
		if ("value" in $$props) $$invalidate(0, value = $$props.value);
		if ("onChangedValue" in $$props) $$invalidate(11, onChangedValue = $$props.onChangedValue);
	};

	$$self.$capture_state = () => ({
		onMount,
		row,
		col,
		value,
		onChangedValue,
		alpha,
		delay,
		timer,
		selected,
		prevent,
		editing,
		emitUnselectAllEvent,
		handleUnselectAll,
		onChange,
		hasNewValue,
		onBlur,
		onKeyPressOnInput,
		clicked,
		doubleClicked
	});

	$$self.$inject_state = $$props => {
		if ("row" in $$props) $$invalidate(1, row = $$props.row);
		if ("col" in $$props) $$invalidate(2, col = $$props.col);
		if ("value" in $$props) $$invalidate(0, value = $$props.value);
		if ("onChangedValue" in $$props) $$invalidate(11, onChangedValue = $$props.onChangedValue);
		if ("timer" in $$props) timer = $$props.timer;
		if ("selected" in $$props) $$invalidate(3, selected = $$props.selected);
		if ("prevent" in $$props) prevent = $$props.prevent;
		if ("editing" in $$props) $$invalidate(4, editing = $$props.editing);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		value,
		row,
		col,
		selected,
		editing,
		alpha,
		onChange,
		onBlur,
		onKeyPressOnInput,
		clicked,
		doubleClicked,
		onChangedValue
	];
}

class Cell extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance, create_fragment, safe_not_equal, {
			row: 1,
			col: 2,
			value: 0,
			onChangedValue: 11
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Cell",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*row*/ ctx[1] === undefined && !("row" in props)) {
			console.warn("<Cell> was created without expected prop 'row'");
		}

		if (/*col*/ ctx[2] === undefined && !("col" in props)) {
			console.warn("<Cell> was created without expected prop 'col'");
		}

		if (/*value*/ ctx[0] === undefined && !("value" in props)) {
			console.warn("<Cell> was created without expected prop 'value'");
		}

		if (/*onChangedValue*/ ctx[11] === undefined && !("onChangedValue" in props)) {
			console.warn("<Cell> was created without expected prop 'onChangedValue'");
		}
	}

	get row() {
		throw new Error("<Cell>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set row(value) {
		throw new Error("<Cell>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get col() {
		throw new Error("<Cell>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set col(value) {
		throw new Error("<Cell>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get value() {
		throw new Error("<Cell>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set value(value) {
		throw new Error("<Cell>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get onChangedValue() {
		throw new Error("<Cell>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set onChangedValue(value) {
		throw new Error("<Cell>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/Row.svelte generated by Svelte v3.24.1 */
const file$1 = "src/components/Row.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[4] = list[i];
	child_ctx[6] = i;
	return child_ctx;
}

// (17:2) {#each Array(cols) as _, col}
function create_each_block(ctx) {
	let cell;
	let current;

	cell = new Cell({
			props: {
				row: /*row*/ ctx[1],
				col: /*col*/ ctx[6],
				value: /*rowData*/ ctx[2][/*col*/ ctx[6]] || "",
				onChangedValue: /*handleChangedCell*/ ctx[3]
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(cell.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(cell.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(cell, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const cell_changes = {};
			if (dirty & /*row*/ 2) cell_changes.row = /*row*/ ctx[1];
			if (dirty & /*rowData*/ 4) cell_changes.value = /*rowData*/ ctx[2][/*col*/ ctx[6]] || "";
			if (dirty & /*handleChangedCell*/ 8) cell_changes.onChangedValue = /*handleChangedCell*/ ctx[3];
			cell.$set(cell_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(cell.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(cell.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(cell, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(17:2) {#each Array(cols) as _, col}",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let div;
	let current;
	let each_value = Array(/*cols*/ ctx[0]);
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div_nodes);
			}

			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "row svelte-14wbpsf");
			add_location(div, file$1, 15, 0, 199);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*row, rowData, handleChangedCell, cols*/ 15) {
				each_value = Array(/*cols*/ ctx[0]);
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { cols } = $$props;
	let { row } = $$props;
	let { rowData } = $$props;
	let { handleChangedCell } = $$props;
	const writable_props = ["cols", "row", "rowData", "handleChangedCell"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Row> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Row", $$slots, []);

	$$self.$$set = $$props => {
		if ("cols" in $$props) $$invalidate(0, cols = $$props.cols);
		if ("row" in $$props) $$invalidate(1, row = $$props.row);
		if ("rowData" in $$props) $$invalidate(2, rowData = $$props.rowData);
		if ("handleChangedCell" in $$props) $$invalidate(3, handleChangedCell = $$props.handleChangedCell);
	};

	$$self.$capture_state = () => ({
		Cell,
		cols,
		row,
		rowData,
		handleChangedCell
	});

	$$self.$inject_state = $$props => {
		if ("cols" in $$props) $$invalidate(0, cols = $$props.cols);
		if ("row" in $$props) $$invalidate(1, row = $$props.row);
		if ("rowData" in $$props) $$invalidate(2, rowData = $$props.rowData);
		if ("handleChangedCell" in $$props) $$invalidate(3, handleChangedCell = $$props.handleChangedCell);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [cols, row, rowData, handleChangedCell];
}

class Row extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$1, create_fragment$1, safe_not_equal, {
			cols: 0,
			row: 1,
			rowData: 2,
			handleChangedCell: 3
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Row",
			options,
			id: create_fragment$1.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*cols*/ ctx[0] === undefined && !("cols" in props)) {
			console.warn("<Row> was created without expected prop 'cols'");
		}

		if (/*row*/ ctx[1] === undefined && !("row" in props)) {
			console.warn("<Row> was created without expected prop 'row'");
		}

		if (/*rowData*/ ctx[2] === undefined && !("rowData" in props)) {
			console.warn("<Row> was created without expected prop 'rowData'");
		}

		if (/*handleChangedCell*/ ctx[3] === undefined && !("handleChangedCell" in props)) {
			console.warn("<Row> was created without expected prop 'handleChangedCell'");
		}
	}

	get cols() {
		throw new Error("<Row>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set cols(value) {
		throw new Error("<Row>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get row() {
		throw new Error("<Row>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set row(value) {
		throw new Error("<Row>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get rowData() {
		throw new Error("<Row>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set rowData(value) {
		throw new Error("<Row>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get handleChangedCell() {
		throw new Error("<Row>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set handleChangedCell(value) {
		throw new Error("<Row>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/components/Table.svelte generated by Svelte v3.24.1 */

function get_each_context$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[5] = list[i];
	child_ctx[7] = i;
	return child_ctx;
}

// (30:0) {#each Array(rows) as _, row}
function create_each_block$1(ctx) {
	let row_1;
	let current;

	row_1 = new Row({
			props: {
				row: /*row*/ ctx[7],
				cols: /*cols*/ ctx[1],
				rowData: /*data*/ ctx[0][/*row*/ ctx[7]] || {},
				handleChangedCell: /*handleChangedCell*/ ctx[3]
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(row_1.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(row_1.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(row_1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const row_1_changes = {};
			if (dirty & /*data*/ 1) row_1_changes.rowData = /*data*/ ctx[0][/*row*/ ctx[7]] || {};
			row_1.$set(row_1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(row_1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(row_1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(row_1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$1.name,
		type: "each",
		source: "(30:0) {#each Array(rows) as _, row}",
		ctx
	});

	return block;
}

function create_fragment$2(ctx) {
	let each_1_anchor;
	let current;
	let each_value = Array(/*rows*/ ctx[2]);
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		l: function claim(nodes) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*cols, data, handleChangedCell*/ 11) {
				each_value = Array(/*rows*/ ctx[2]);
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$1(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block$1(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props, $$invalidate) {
	let cols = 8;
	let rows = 15;
	let data = {};
	let { tableIdentifier } = $$props;

	onMount(() => {
		if (typeof window !== "undefined") {
			const localStorageData = window.localStorage.getItem(tableIdentifier);

			if (localStorageData) {
				$$invalidate(0, data = JSON.parse(localStorageData));
			}
		}
	});

	const handleChangedCell = (col, row, value) => {
		if (!data[row]) $$invalidate(0, data[row] = {}, data);
		$$invalidate(0, data[row][col] = value, data);

		if (window && window.localStorage) {
			window.localStorage.setItem(tableIdentifier, JSON.stringify(data));
		}
	};

	const writable_props = ["tableIdentifier"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Table> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("Table", $$slots, []);

	$$self.$$set = $$props => {
		if ("tableIdentifier" in $$props) $$invalidate(4, tableIdentifier = $$props.tableIdentifier);
	};

	$$self.$capture_state = () => ({
		onMount,
		Row,
		cols,
		rows,
		data,
		tableIdentifier,
		handleChangedCell
	});

	$$self.$inject_state = $$props => {
		if ("cols" in $$props) $$invalidate(1, cols = $$props.cols);
		if ("rows" in $$props) $$invalidate(2, rows = $$props.rows);
		if ("data" in $$props) $$invalidate(0, data = $$props.data);
		if ("tableIdentifier" in $$props) $$invalidate(4, tableIdentifier = $$props.tableIdentifier);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [data, cols, rows, handleChangedCell, tableIdentifier];
}

class Table extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$2, create_fragment$2, safe_not_equal, { tableIdentifier: 4 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Table",
			options,
			id: create_fragment$2.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*tableIdentifier*/ ctx[4] === undefined && !("tableIdentifier" in props)) {
			console.warn("<Table> was created without expected prop 'tableIdentifier'");
		}
	}

	get tableIdentifier() {
		throw new Error("<Table>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set tableIdentifier(value) {
		throw new Error("<Table>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/routes/spreadsheets/[id].svelte generated by Svelte v3.24.1 */

function create_fragment$3(ctx) {
	let table;
	let current;

	table = new Table({
			props: { tableIdentifier: /*id*/ ctx[0] },
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(table.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(table.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(table, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const table_changes = {};
			if (dirty & /*id*/ 1) table_changes.tableIdentifier = /*id*/ ctx[0];
			table.$set(table_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(table.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(table.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(table, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$3.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

async function preload({ params }) {
	const { id } = params;
	return { id };
}

function instance$3($$self, $$props, $$invalidate) {
	let { id } = $$props;
	const writable_props = ["id"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<U5Bidu5D> was created with unknown prop '${key}'`);
	});

	let { $$slots = {}, $$scope } = $$props;
	validate_slots("U5Bidu5D", $$slots, []);

	$$self.$$set = $$props => {
		if ("id" in $$props) $$invalidate(0, id = $$props.id);
	};

	$$self.$capture_state = () => ({ preload, id, Table });

	$$self.$inject_state = $$props => {
		if ("id" in $$props) $$invalidate(0, id = $$props.id);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [id];
}

class U5Bidu5D extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$3, create_fragment$3, safe_not_equal, { id: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "U5Bidu5D",
			options,
			id: create_fragment$3.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*id*/ ctx[0] === undefined && !("id" in props)) {
			console.warn("<U5Bidu5D> was created without expected prop 'id'");
		}
	}

	get id() {
		throw new Error("<U5Bidu5D>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set id(value) {
		throw new Error("<U5Bidu5D>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default U5Bidu5D;
export { preload };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
